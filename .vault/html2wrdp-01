#!/bin/bash
# Convert HTML to Wordpress blogging format

# Program(s) required
progs_req=(ascii2uni)
for p in ${progs_req[@]}; do
  hash "$p" 2>&- || \
  { echo >&2 " Program required \"$p\" not installed."; exit 1; }
done

# Display usage if no parameters given
if [[ -z "$@" ]]; then
  echo " ${0##*/} <htmlfile> - convert HTML to Wordpress blogging format"
  exit
fi

# Check if selection exists
if [ ! -f "$@" ]; then
  echo " Selection \""$@"\" does not exist."
  exit
fi

## Code blocks

# Remove four space after <code> and during code blocks (fix for Gedit
# having to use eight spaces for syntax recognition of code lines)
sed -i 's/<code>    /<code>/g' "$@"
sed -i 's/^    //g'            "$@"

# Only <pre> tags necessary (i.e. not <pre><code>)
sed -i 's|\(<pre.*>\)<code>|\1|g' "$@"
sed -i 's|</code></pre>|</pre>|g' "$@"

## Convert HTML entities to UTF8 (no output, indent, no wrapping, mod. org.)
#tidy -utf8 -f /tmp/html2wrdp_error.txt --wrap -m "$@"


# Delete the HTML page information created from tidy
sed -i '1,/<body>/d'  "$@"
sed -i 's|</body[^>]*>||g' "$@"
sed -i 's|</html[^>]*>||g' "$@"

## Newlines

# Newlines afer pre
sed -i 's|</pre>|</pre>\n|g' "$@"

# Newline after headers
sed -i 's/\(^<h[1-5].*\)/\1\n/g' "$@"

# Remove paragraph tags, newline after
sed -i 's/<p>//g'    "$@"
sed -i 's|</p>|\n|g' "$@"

# Delete breaks
sed -i 's/<br>//g' "$@"

# Use custom pre tag

## Cleanup

# Delete first line if blank
sed '1{/^$/d}' "$@"

# Remove trailing blank lines
  while [ "$(tail -n 1 "$@")" == "" ]; do
    sed -i '$d' "$@"
  done

# Delete final newline
perl -i -e 'local $/; $_ = <>; s/\n$//; print' "$@"